---
layout: post
title:  "Testcontainers: contenedores al servicio del testing"
date:   2021-05-06 8:00:00
author: jessica
lang: es
categories: testing, software quality, QA
tags: testing, calidad, software quality, QA, testContainers, test integraci√≥n
header-image: 2021-05-06-testcontainers/header.jpg
---

Siempre he sido m√°s fan de los test unitarios que de los tests de integraci√≥n, sobre todo por un motivo: no necesito nada externo para poder pasarlos. No necesito tener una base de datos arrancada, un servicio externo al que conectarme o un Kafka funcionando para poder pasar los tests y por tanto para poder desarrollar.
Y eso en el entorno de desarrollo, si hablamos ya del entorno de integraci√≥n ya ni te cuento.  
Por ejemplo, en el caso de las bases de datos tenemos la opci√≥n de hacer los tests con H2. Pero tambi√©n es cierto que dependiendo del tipo de proyecto, puede darse la situaci√≥n de que algo que funciona perfectamente en H2 no lo haga en la base de datos para la que estamos desarrollando: 
Tan cierto como que frecuentemente hemos ca√≠do en el  
> ‚ÄúVenga va... con h2, por no arrancar la bd...‚Äù  

lo es la situaci√≥n  
> ‚Äú¬°Pero si est√° testeado! ¬øEntonces por qu√© ...? Ups...‚Äù

Yo siempre he sido de las que necesitaba tener todo instalado: Mysql, Postgres, Kafka,.... todo lo que fuese necesario para ejecutar el proyecto. As√≠, dependiendo del proyecto me ten√≠a que asegurar de tener todo instalado y unos servicios u otros levantados... hasta que mis compa√±eros me descubrieron los contenedores, bueno Docker. 
Nunca he sido muy h√°bil con estas cosas, pero la verdad es que gracias a ellos, no tengo la necesidad de tener millones de cosas instaladas: tengo las im√°genes de los servicios que necesito y no tengo m√°s que poner en marcha los que necesito y ya.  
Bueno al grano. Es cierto que ahora para ejecutar las aplicaciones lo tengo todo mucho m√°s organizado, pero en realidad para desarrollar, sigo estando un poco en las mismas: si quiero pasar tests de integraci√≥n tengo que acordarme de levantar la base de datos (por ejemplo) as√≠ que no termina de ser tan transparente como lo es H2.  

<small>Como alguno ya habr√° imaginado todo esto tambi√©n tiene aplicaci√≥n en CI, pero me voy a centrar en el d√≠a a d√≠a del desarrollador y en c√≥mo nos ayuda esta herramienta en el trabajo diario.</small>

> "Tiene que haber algo que una ambos mundos y que haga que los tests sean autosuficientes simulando un entorno real"

Con esta idea en la cabeza y tras una conversaci√≥n con un compi descubr√≠ que as√≠ era: ¬°exist√≠a algo llamado [**TestContainers**](https://www.testcontainers.org/){:target="_blank"}!

Por ejemplo, imaginemos algunas situaciones del d√≠a que nos hacen suspirar (o resoplar m√°s bien): ¬°nuevo miembro en el equipo! o ¬øsi queremos pedir ayuda a alg√∫n compi con un caso de uso o bug? o ¬øsi volvemos a un proyecto en el que hace meses que no trabajamos?  
Ante situaciones como estas (y otras) cu√°ntas veces no habremos pensado: ¬øno ser√≠a posible descargar todo y poder lanzar los tests y ponerme a desarrollar sin hacer absolutamente nada m√°s? 
Hace un tiempo, viendo una presentaci√≥n de [@kiview](https://twitter.com/kiview){:target="_blank"}, me di cuenta que no estaba sola. Al principio de su presentaci√≥n dec√≠a algo as√≠ como:
> ...una experiencia de onboarding exitosa en un proyecto ser√≠a que el desarrollador s√≥lo tuviese que clonar el repositorio, hacer el build y que con eso ya tuviesesmos el build hecho incluyendo los tests unitarios y los tests de integraci√≥n...  

Es decir, seguir estos pasos:
```
> git clone https://github.com/wearearima/school-library-testcontainers-01.git
> cd school-library-testcontainers-01
> ./mvnw install
```
¬°Y ya!  
Los ojos me hicieron üòç. La charla se titulaba [Integration Testing with Docker and Testcontiners](https://www.youtube.com/watch?v=Lv1evJe2MRI){:target="_blank"}, exacto: **TestContainers**. Bueno, pues ¬°good news! Parece que trabajar con **TestContainers** nos facilitan el acercarnos a ese objetivo y nos simplifica el trabajo para que nos podamos centrar en el desarrollo propiamente dicho (obviamente, impl√≠citamente en los tests).

# Ejemplo de Database container (Postgres Module)
As√≠ contado, todo suena muy bien pero (como bien sabr√©is quienes me le√°is de vez en cuando) para entender los conceptos tengo que ponerlos en pr√°ctica, as√≠ que hemos preparado un ejemplo en [Github](https://github.com/wearearima/school-library-testcontainers-01){:target="_blank"}. 
Lo m√°s com√∫n probablemente es la situaci√≥n en la que hacemos tests contra base de datos y Testcontainers nos ofrecen diferentes _m√≥dulos_ para diferentes bases de datos. Por ello, hemos preparado un ejemplo sencillo, de una aplicaci√≥n Spring Boot, que se conecta a una base de datos Postgres.  
Nuestro ejemplo:  
    Supongamos una biblioteca de un cole. Tenemos una funcionalidad que servir√° para ir dando de alta los ejemplares que vayamos recibiendo. Uno de los m√©todos que podr√≠amos tener, pod√≠a ser el de "a√±adir una copia de un libro" (entendiendo "libro" como el concepto y "copia" la representaci√≥n de cada uno de los ejemplares que podamos tener). 
<small>En un futuro seguiremos evolucionando este ejemplo e iremos a√±adiendo c√≥digo.</small>


Como hemos dicho, utilizaremos el m√≥dulo que hay para [Postgres](https://www.testcontainers.org/modules/databases/postgres/){:target="_blank"}. La implementaci√≥n de los tests utilizando este container es muy sencilla, ¬°vamos all√°!

## Instalar Docker
Lo primero que necesitamos es instalar [Docker Desktop](https://www.docker.com/products/docker-desktop){:target="_blank"} (en caso de no tenerlo). A continuaci√≥n dejo tambi√©n, la secci√≥n de la documentaci√≥n donde podemos encontrar los requerimientos de Docker: [General Docker requirements](https://www.testcontainers.org/supported_docker_environment/){:target="_blank"}.


## A√±adir las dependencias necesarias
Para empezar con el c√≥digo, lo primero que tendremos que hacer ser√° a√±adir las dependencias necesarias al proyecto (en nuestro caso en el pom.xml).

En nuestro caso hemos generado el proyecto utilizando [Spring Initializr](https://start.spring.io/){:target="_blank"}, desde donde hemos a√±adido la dependencia

![Imagen de c√≥mo se a√±ade la depedencia de testscontainer utilizando springinitializr](/assets/images/2021-05-06-testcontainers/spring-initializr.png){: .center }

En caso de hacerlo manualmente, en la [documentaci√≥n](https://www.testcontainers.org/quickstart/junit_5_quickstart/#1-add-testcontainers-as-a-test-scoped-dependency){:target="_blank"} se detalla c√≥mo a√±adir las dependencias.

Adem√°s, como vamos a utilizar el m√≥dulo de Postgres a√±adimos esa dependencia:

#### pom.xml
```xml
<dependency>
    <groupId>org.testcontainers</groupId>
    <artifactId>postgresql</artifactId>
    <scope>test</scope>
</dependency>
```

Bueno, y del mismo modo que har√≠amos si no estuviesemos utilizando Testcontainers, incluiremos la dependencia de Postgres.

#### pom.xml
```xml
<dependency>
    <groupId>org.postgresql</groupId>
    <artifactId>postgresql</artifactId>
    <scope>runtime</scope>
</dependency>
```

## Start coding!
¬°Y listo! Ya podemos implementar nuestro caso de uso. Vamos a implementar m√°s de un test (disponibles en [Github](https://github.com/wearearima/school-library-testcontainers-01/blob/master/src/test/java/eu/arima/schoolLibrary/bookStore/BooksServiceTest.java){:target="_blank"}. ), aqu√≠ veremos el c√≥digo para uno de ellos. Ser√° un test que haremos que comprobar√° que cuando a√±adamos una copia a un libro cuyo ISBN ya exista, se a√±adir√° una copia al mismo. ¬øSencillo verdad?

#### BooksServiceTest.java
```java
@SpringBootTest
@Transactional
class BooksServiceTest {

    @Autowired
    private BooksService booksService;
    @Autowired
    private BooksRepository booksRepository;
    @Autowired
    private CopiesRepository copiesRepository;

    @Test
    @DisplayName("addCopy for a book that exists with the provided isbn adds a new copy to it")
    void addCopy_if_book_exist_adds_new_copy() {
        String isbn = "9780745168197";
        Book existingBook = booksRepository.findBookByIsbnEquals(isbn).orElseThrow();
        int existingNumCopies = existingBook.getCopies().size();

        Copy createdCopy = booksService.addCopy(existingBook.getTitle(), existingBook.getAuthors(), isbn);

        Book updatedBook = booksRepository.findById(existingBook.getId()).orElseThrow();
        assertAll(
                () -> assertEquals(existingNumCopies + 1, updatedBook.getCopies().size()),
                () -> assertRelationBetweenBookAndCopyIsCorrect(createdCopy, updatedBook));

    }

}
```

Pero si ejecutamos el test sin m√°s, veremos que falla por no poder levantar el contexto: le falta la informaci√≥n de la base de datos.
Es cierto que podr√≠amos ir a application.properties y setear ah√≠ los valores.... pero eso requerir√≠a que si ese nuevo desarrollador que llegar (o t√∫ que te vas a descargar el ejemplo) levantase la base de datos etc. Ya no ser√≠a el "ideal" que buscamos. ¬øLa soluci√≥n?

### @Testcontainers
Efectivamente una anotaci√≥n `@Testcontainers` y unas l√≠neas m√°s y lo tendremos:

#### BooksServiceTest.java
```java
@SpringBootTest
@Transactional
@Testcontainers
class BooksServiceTest {

    @Container
    private final static PostgreSQLContainer postgresContainer = new PostgreSQLContainer(DockerImageName
            .parse("postgres:13"));

    @DynamicPropertySource
    static void databaseProperties(DynamicPropertyRegistry registry) {
        registry.add("spring.datasource.url", postgresContainer::getJdbcUrl);
        registry.add("spring.datasource.username", postgresContainer::getUsername);
        registry.add("spring.datasource.password", postgresContainer::getPassword);
    }

}
```
¬øQu√© hemos hecho?
- Hemos a√±adido la anotaci√≥n `@Testcontainers` a la clase de test. 
- Hemos creado una instancia de un contenedor con Postgres utilizando la anotaci√≥n `@Container` y especificando la versi√≥n. 
- Y por √∫ltimo hemos seteado la informaci√≥n del datasource a partir del contenedor creado mediante `@DynamicPropertySource`.

Como pod√©is ver la implementaci√≥n es muy sencilla, el beneficio es instant√°neo: pod√©is descargaros el ejemplo y ejecutarlo directamente en vuestros equipos sin nada m√°s que tener Docker instalado (¬ørecord√°is los 3 comandos de antes? Pod√©is probarlo.)

### Patr√≥n Singleton
Hay otra forma de implementar todo esto, m√°s eficiente, que ser√≠a utilizando el patr√≥n Singleton. De esta forma utilizar√≠amos el mismo contenedor en m√°s de una clase. 
De hecho, en la documentaci√≥n se recomienda esta aproximaci√≥n. En este ejemplo donde a√∫n s√≥lamente tenemos un clase de test no parece √∫til, pero probablemente no ser√° la √∫nica funcionalidad de nuestro proyecto ¬øverdad? Llegado ese momento, entonces s√≠, pasar√≠amos al patr√≥n Singleton, como se explica [aqu√≠](https://www.testcontainers.org/test_framework_integration/manual_lifecycle_control/#singleton-containers){:target="_blank"}.

Veamos c√≥mo ser√≠a:

#### BooksServiceTest.java
```java
@SpringBootTest
@Transactional
class BooksServiceTest extends PostgresContainerBaseTest {
    //Ya no es necesario @Container ni @DynamicPropertySource porque lo gestionaremos en PostgresContainerBaseTest
}
```

#### PostgresContainerBaseTest.java
```java
public abstract class PostgresContainerBaseTest {

    static final PostgreSQLContainer postgresContainer;

    static {
        postgresContainer = new PostgreSQLContainer<>(DockerImageName.parse("postgres:13"));
        postgresContainer.start();
    }

    @DynamicPropertySource
    static void databaseProperties(DynamicPropertyRegistry registry) {
        registry.add("spring.datasource.url", postgresContainer::getJdbcUrl);
        registry.add("spring.datasource.username", postgresContainer::getUsername);
        registry.add("spring.datasource.password", postgresContainer::getPassword);
    }
}
```

## Tip sobre Pitest
¬ø[PIT](https://pitest.org/){:target="_blank"}? ¬øQu√© tiene que ver **Testcontainers** con **PIT**? Recordemos que descubrimos que pod√≠amos [medir la calidad de nuestros tests con PIT](https://blog.arima.eu/es/2020/05/25/mutation-testing.html){:target="_blank"}. Es cierto que PIT est√° directamente orientado a **tests unitarios** (sobre todo por cuesti√≥n de tiempos/eficiencia) pero tambi√©n es cierto, que hasta ahora no nos hab√≠amos encontrado con ning√∫n problema a la hora de poner a prueba nuestros **tests de integraci√≥n**.

Sin embargo, si intent√°is ejecutar Pitest sobre tests impelementados utilizando `@Testcontainers` os encontrar√©is con que no pasan. En cambio, si los tests est√°n impelementados utilizando el patr√≥n Singleton, podr√©is realizar el an√°lisis de cobertura de Pit sin problemas.

_Si alguien quiere conocer el por qu√© de todo esto, adem√°s de probar una soluci√≥n propuesta por un contribuyente, puede hacerlo en la [issue](https://github.com/hcoles/pitest/issues/827){:target="_blank"} que abrimos al detectar el problema._


Hasta aqu√≠ una peque√±a introducci√≥n a **Testcontainers**, con un ejemplo de aplicaci√≥n en el caso de una base de datos. Como hemos mencionado anteriormente, Testcontainers nos ofrece otros muchos m√≥dulos. E incluso, en caso de que por nuestras necesidades necesitemos algo m√°s concreto tambi√©n dispone de soporte para que tengamos nuestro propio `docker-compose.yml` como se explica en la [documentaci√≥n](https://www.testcontainers.org/modules/docker_compose/). 
En futuros posts, iremos evolucionando nuestra aplciaci√≥n de forma que podamos introducir algunos ejemplos de otros casos de uso en los que utilizar Testcontainers (para ver de forma pr√°ctica su facilidad de uso y sus ventajas).




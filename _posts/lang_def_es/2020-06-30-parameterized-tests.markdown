---
layout: post
title:  "Descubriendo JUnit 5: Tests Parametrizados"
date:   2020-07-01 9:00:00
author: jessica
lang: es
categories: testing, software quality, QA
tags: testing, calidad, software quality, QA, junit, junit 5, parameterized test
header-image:	2020-06-30-parameterized-tests/header.jpg
---

Estaba preparando el ejemplo de tests para el post [Mutation testing systems, mejorando la calidad de los tests](https://blog.arima.eu/2020/05/25/mutation-testing.html){:target="_blank"} y me surgi√≥ una duda sobre si podr√≠a probar de forma m√°s exhaustiva el m√©todo under test, ya que era consciente de que me dejaba algunos ejemplos sin probar.

El m√©todo de ejemplo a testear es:
```java
@Override
public DayStatusSummary getDayStatusSummaryForWorkerAndDay(String workerUserName, LocalDate date) {

  List<Worklog> worklogsForDay = this.worklogRepository.findByUsernameAndDate(workerUserName, date);

  int totalDuration = worklogsForDay.stream().mapToInt(Worklog::getDuration).sum();

  DayStatusSummary status = new DayStatusSummary(date, workerUserName);

  if (totalDuration == 8) {
    status.addDayStatus(RIGHT_HOURS);
  } else if (totalDuration > 8) {
    status.addDayStatus(EXTRA_HOURS);
  } else {
    status.addDayStatus(MISSING_HOURS);
  }

  return status;
}
```

B√°sicamente lo que hace es a partir de un conjunto de worklogs se encarga de sumar las duraciones y comprobarlas ‚Äúcontra‚Äù la jornada est√°ndar de 8 horas. Si la suma es > 8 debe indicar que hay horas extras, si es < 8 faltar√°n por imputar horas y si es 8 todo estar√° OK.

Este caso es bastante trivial, pero si lo extrapolamos a m√©todos m√°s complejos, no es la primera situaci√≥n de estas caracter√≠sticas que me encuentro, y normalmente termino creando varios tests con diferentes combinaciones finitas, de casos de ejemplo acotados, que normalmente podr√≠a sacar de una tabla de este tipo:


| | | 1 √∫nico worklog | lista de n worklogs (n<1) |
| ------ | ------ | ------ | ------ |
| caso 1 | suma = 8 | test | test |
| caso 2 | suma = a (a<8) | test | test |
| caso 3 | suma = b (b>8) | test | test |

As√≠ a priori mi bater√≠a de tests para este m√©todo podr√≠a ser la siguiente[^1]:

[^1]: C√≥digo fuente para ejemplo de primera versi√≥n de los tests disponible [aqu√≠](https://github.com/wearearima/time-report-parameterized/tree/feature/01_tests_first_approach/src/test/java/eu/arima/tr/reports/reportsServiceImpl/GetDayStatusSummaryForWorkerAndDayTests.java){:target="_blank"}

![Primera aproximaci√≥n del set de tests](/assets/images/2020-06-30-parameterized-tests/01_test_set.png){: .center }

Teniendo en cuenta que `n`, `a` y `b` los fijar√© (en este caso `n = 3`, `a = 7` y `b = 9`) siempre me quedo con la duda de que estoy testeando algunos ejemplos pero no otros: `suma = 7` pero no `suma = 0`o `suma = 9` pero no `suma = 10`, o listas de 1 y 3 elementos pero no de 0 o m√°s de 3....

En este caso en el que los casos 1 y 2 son muy acotados podr√≠a liarme la manta a la cabeza y hacer tests exhaustivos que probasen todos los casos‚Ä¶ Por ejemplo[^2]:

![Segunda aproximaci√≥n del set de tests](/assets/images/2020-06-30-parameterized-tests/02_test_set.png){: .center }

[^2]: C√≥digo fuente para ejemplo de tests exhaustivos disponible [aqu√≠](https://github.com/wearearima/time-report-parameterized/tree/feature/02_tests_exhaustive/src/test/java/eu/arima/tr/reports/reportsServiceImpl/GetDayStatusSummaryForWorkerAndDayTests.java){:target="_blank"}

Pero nunca me ha parecido algo apropiado porque pensando en esfuerzo vs beneficio parece que no compensa, y porque aumentar tanto la clase de test con m√©todos tan ‚Äúredundantes‚Äù probablemente haga que mi clase de tests termine siendo infumable. El ejemplo anterior ratificar√≠a esta idea... y ni siquiera cubrimos todos los ejemplos que se nos podr√≠an ocurrir... ¬°s√≥lo hemos cubierto ejemplos del _caso 2_ con _un √∫nico worklog_!

¬°Otra idea!, ¬øpor qu√© no iterar `n` veces la ejecuci√≥n del m√©todo SUT junto el assert asociado, y personalizar el mensaje de error utilizando el par√°metro de la iteraci√≥n?

Algo as√≠ como el siguiente ejemplo[^3]:

[^3]: C√≥digo fuente para ejemplo de tests iterando SUT disponible [aqu√≠](https://github.com/wearearima/time-report-parameterized/tree/feature/03_tests_tricky_exhaustive/src/test/java/eu/arima/tr/reports/reportsServiceImpl/GetDayStatusSummaryForWorkerAndDayTests.java){:target="_blank"}

```java
@Test
void when_the_worklog_for_the_resquested_day_is_less_than_8_hours_the_status_is_MISSING_HOURS() {
  Worklog wl = mock(Worklog.class);

  for (int i = 0; i < 8; i++) {
    when(wl.getDuration()).thenReturn(i);
    when(worklogRepository.findByUsernameAndDate(ArgumentMatchers.anyString(),
        ArgumentMatchers.any(LocalDate.class))).thenReturn(Arrays.asList(wl));

    DayStatusSummary result = reportsService.getDayStatusSummaryForWorkerAndDay(USERNAME, DAY);

    List<Integer> durations = Arrays.asList(i);
    List<DayStatus> resultStatusList = result.getStatusList();
    assertEquals(1, resultStatusList.size(), "Statuslist size failed for worklogs with duration " + durations);
    assertEquals(MISSING_HOURS, resultStatusList.get(0), "Daystatus failed for with duration " + durations);
  }
}
```

En este caso estar√© ejecutando un √∫nico test, pero si falla para alg√∫n valor de `i`, el mensaje de error me indicar√° el ejemplo que falla.

Vale, con esto cubro los casos m√°s acotados‚Ä¶.. y ¬øpara los menos acotados? Se me ocurre generar varios valores random y aplicar el mismo patr√≥n[^4]:

[^4]: C√≥digo fuente para ejemplo de tests iterando SUT con valores random disponible [aqu√≠](https://github.com/wearearima/time-report-parameterized/tree/feature/03_tests_tricky_exhaustive/src/test/java/eu/arima/tr/reports/reportsServiceImpl/GetDayStatusSummaryForWorkerAndDayTests.java){:target="_blank"}

```java
@Test
void when_the_worklog_for_the_resquested_day_is_more_than_8_hours_the_status_is_EXTRA_HOURS() {
  Worklog wl = mock(Worklog.class);
  List<Integer> worklogDurations = (new Random().ints(10, 9, Integer.MAX_VALUE)).boxed()
      .collect(Collectors.toList());
  for (Integer d : worklogDurations) {
    when(wl.getDuration()).thenReturn(d);
    when(worklogRepository.findByUsernameAndDate(ArgumentMatchers.anyString(),
        ArgumentMatchers.any(LocalDate.class))).thenReturn(Arrays.asList(wl));

    DayStatusSummary result = reportsService.getDayStatusSummaryForWorkerAndDay(USERNAME, DAY);

    List<Integer> durations = Arrays.asList(d);
    List<DayStatus> resultStatusList = result.getStatusList();
    assertEquals(1, resultStatusList.size(), "Statuslist size failed for worklogs with duration " + durations);
    assertEquals(EXTRA_HOURS, resultStatusList.get(0), "Daystatus failed for with duration " + durations);

  }
}
```

Pues s√≠, reconozco que alguna vez (en alguno de mis sideprojects) he hecho alguna de estas ‚Äúchapucillas‚Äùü§´üò∞. Digo chapucilla, porque a priori no suena muy bien hacer estas triqui√±uelas... (pero bueno, hay tests, hay cobertura de mutantes, estoy trasteando, as√≠ practico testing.....). Excusas y m√°s excusas. Intento enga√±arme a m√≠ misma y no duermo tranquila. Amanezco, pensando en c√≥mo podr√≠a cubrir estos ‚Äúvac√≠os‚Äù aparentes. Es un caso sencillo... ¬øno hay nada que pueda ayudarme en esto?

La respuesta es que s√≠, y ¬°encima lo ofrece JUnit 5 por s√≠ mismo!: no me hace falta ninguna herramienta nueva, s√≥lo sacarle m√°s chicha a la que tengo. La soluci√≥n: [Parameterizered Tests](https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests){:target="_blank"}. Est√°n en modo experimental para la √∫ltima versi√≥n de JUnit 5, pero lo cierto es que est√°n disponibles desde la versi√≥n 5.0 ¬°y yo sin conocerlos! Vamos a probarlo.

Lo primero es a√±adir en el `pom.xml` la dependencia correspondiente:
```xml
<!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-params -->
<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-params</artifactId>
    <scope>test</scope>
</dependency>
```

A continuaci√≥n, modificamos el primer test utilizando la anotaci√≥n y queda como sigue:

```java
@ParameterizedTest(name = "Given a worklog for the requested day with {0} duration the status is MISSING_HOURS")
@ValueSource(ints = { 0, 1, 2, 3, 4, 5, 6, 7 })
void worklog_duration_for_requested_day_less_than_8(Integer duration) {
  Worklog wl = mock(Worklog.class);
  when(wl.getDuration()).thenReturn(duration);
  when(worklogRepository.findByUsernameAndDate(ArgumentMatchers.anyString(),
      ArgumentMatchers.any(LocalDate.class))).thenReturn(Arrays.asList(wl));

  DayStatusSummary result = reportsService.getDayStatusSummaryForWorkerAndDay(USERNAME, DAY);

  assertStatusEquals(MISSING_HOURS, result);
}
```

Tras esta modificaci√≥n no estamos ejecutando un s√≥lo test, **estamos ejecutando 8 tests**:

![Ejemplo de parameterized](/assets/images/2020-06-30-parameterized-tests/03_test_parameterized.png){: .center }

Adem√°s, si por ejemplo, quisi√©ramos hacer lo mismo con el m√©todo que utilizaba valores random, podr√≠amos conseguir algo similar haciendo:

```java
@ParameterizedTest(name = "Given a worklog for the requested day {0} the status is EXTRA_HOURS")
@MethodSource
void worklog_duration_for_requested_day_more_than_8(Worklog wl) {
  when(worklogRepository.findByUsernameAndDate(ArgumentMatchers.anyString(),
      ArgumentMatchers.any(LocalDate.class))).thenReturn(Arrays.asList(wl));

  DayStatusSummary result = reportsService.getDayStatusSummaryForWorkerAndDay(USERNAME, DAY);

  assertStatusEquals(EXTRA_HOURS, result);
}

static Stream<Worklog> worklog_duration_for_requested_day_more_than_8() {
  // since 24h/day --> max value is 24
  Stream<Integer> randomDurations = (new Random().ints(10, 9, 24)).boxed();
  return randomDurations.map(d -> {
    Worklog wl = mock(Worklog.class);
    when(wl.toString()).thenReturn(String.format("[with %d duration]", d)); // mock info in test description
    when(wl.getDuration()).thenReturn(d);
    return wl;
  });
}
```

En este caso en vez de devolver una lista de enteros con las duraciones hemos probado a hacer el ejemplo devolviendo directamente diferentes worklogs.

![Ejemplo de parameterized con valores ramdom](/assets/images/2020-06-30-parameterized-tests/04_test_parameterized_random.png){: .center }

Nota: Este ejemplo est√° disponible al completo [en Github](https://github.com/wearearima/time-report-parameterized/tree/feature/04_tests_parameterizedTest){:target="_blank"}.

Otra cosa que siempre he echado de menos de mis tiempos en Grails ha sido la posibilidad de utilizar nombres m√°s ‚Äúlegibles‚Äù para los tests. Y ya que estoy de suerte, y con la anotaci√≥n `@ParameterizedTest` puedo poner un nombre... seguro que hay algo para los tests ‚Äúnormales‚Äù... ¬°Bingo! Otra anotaci√≥n al rescate: `@Displayname`.

Pues nada, ahora tengo unos tests mejores, m√°s f√°ciles de entender y de mantener que los de los ejemplos 2 y 3, y m√°s completos que los del ejemplo 1. 

## Descubriendo JUnit 5
Nos acostumbramos a hacer las cosas de determinada manera y a veces nos cuesta levantar la mirada y ver si hay herramientas que nos faciliten la vida (que con poco esfuerzo vengan a cubrir carencias que hab√≠amos detectado en nuestro propio c√≥digo). En este caso, hemos descubierto unas anotaciones que nos ayudar√°n en nuestro d√≠a a d√≠a a hacer que nuestros tests sean mejores.

`@ParameterizedTest` para poder crear m√∫ltiples ejemplos para una misma situaci√≥n de un SUT. Los par√°metros de entrada pueden ser tan sencillos como una lista de valores (si s√≥lo se necesita uno utilizando `@ValueSource`) o m√°s complejos, desde m√∫ltiples par√°metros para cada test, hasta tipos de par√°metros m√°s complejos (utilizando por ejemplo `@MethodSource`). Toda la informaci√≥n puede encontrarse [en esta secci√≥n](https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests){:target="_blank"} de la documentaci√≥n de JUnit 5.

Adem√°s `@DisplayName` para poder poner nombres m√°s legibles a los tests, algo muy √∫til especialmente cuando fallan: poder leer lo que est√° pasando de forma sencilla. Toda la informaci√≥n puede encontrarse [en esta secci√≥n](https://junit.org/junit5/docs/current/user-guide/#writing-tests-display-names){:target="_blank"} de la documentaci√≥n de JUnit 5.


## M√°s all√°‚Ä¶
Sin embargo, sigo notando cierto run run: ¬øqu√© pasa con esos casos que no puedo atacar de forma exhaustiva? ¬øPodr√≠a usar `@ParameterizedTest`s y pasar random values de diferentes listas?
Parece que s√≠, pero... en este caso que es sencillo no parece que tenga problemas. Sin embargo y ¬øsi tuviese m√°s par√°metros de entrada o m√°s complejos? ¬øTendr√≠a que desarrollar mi propio ‚Äúgenerador‚Äù de combinaciones aleatorias? ¬øC√≥mo de fr√°giles ser√≠an mis tests? ¬øEs posible hacer tests que no est√©n basados en ejemplo? 
Investigando un poco me encuentro con un concepto que parece que puede encajar: **Property Based Testing**, donde en base a unos par√°metros de caracter√≠sticas determinadas se verifica una propiedad/comportamiento concreto del SUT.

No tengo claro si encajar√≠a en este ejemplo, pero ¬øquiz√°s deba profundizar m√°s en el tema para ver si hay algo que podamos aprender y que nos permita mejorar nuestros tests? ¬°Por supuesto, all√° vamos!
